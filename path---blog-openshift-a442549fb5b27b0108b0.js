webpackJsonp([97105547414059],{446:function(e,t){e.exports={data:{markdownRemark:{html:'<h1 id="introduction"><a href="#introduction" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h1>\n<p>Welcome to the Aurora OpenShift Platform of the <a href="http://skatteetaten.no/en/person/">Norwegian Tax Administration (NTA)</a> on GitHub. The Norwegian Tax\nAdministration is an agency under the authority of the Ministry of Finance and is responsible for taxation and the\npopulation register.</p>\n<p>These pages on GitHub are the home of the initiative to open source the platform that runs part of the NTA\'s digital tax\nand customs services; the Aurora OpenShift Platform.</p>\n<p>This document will describe what the Aurora OpenShift Platform is and how it came to be. It will also cover how we\nare organized for developing software and our development process - including how we use the platform to build and\ndeploy our applications, and our guidelines and requirements to applications using the platform.</p>\n<h1 id="a-short-history"><a href="#a-short-history" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A Short History</h1>\n<p>The work on what would become the Aurora OpenShift Platform started late in 2014 in the wake of a major project to\nmodernize the handling of the foundational data for most tax calculations in Norway. The project identified during its\ncourse the need for a common platform for running and handling the vast amount of micro services across development,\ntest and reference environments that the project produced, and that would be produced by even larger projects down the\nline.</p>\n<p>A technology evaluation phase revealed the Red Hat OpenShift Container Platform (then Red Hat OpenShift Origin 3.0) to\nbe the most appropriate technology to base a new common platform on. Most of 2015 was spent on getting the first few\napplications successfully running on OpenShift and device a suitable strategy for running, configuring and managing all\nthe applications that would, in time, be running on the platform.</p>\n<p>As time passed it became clear that Kubernetes based\nOpenShift was an extremely capable platform for running our applications. We also realized that handling integration\nwith the other infrastructure components (like database servers, logging/metrics/monitoring tools, and security\ninfrastructure), and handling the sheer amount of application instances and application runtime environments with all\ntheir associated application versions, configurations and delivery schedules required more than OpenShift alone could\nprovide.</p>\n<p>In the course of getting the first few applications running on OpenShift, quite a few departments of the\nNTA had been involved in some sort of automation and integration work with the platform; some of them major\nundertakings. By the end of 2016, as the tools and services that provided those integrations matured and got structured,\na select set of them became collectivly known as the Aurora OpenShift Platform.</p>\n<p>In December 2016 it was decided that as much possible of the Aurora OpenShift Platform should be open sourced under\nan APL 2.0 compatible license.</p>\n<h1 id="requirements-for-the-aurora-openshift-platform"><a href="#requirements-for-the-aurora-openshift-platform" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Requirements for the Aurora OpenShift Platform</h1>\n<p>The Norwegian Tax Administration maintains millions of lines of code and employs 800 people in software development,\nIT operations, management and supporting roles. When the need for new software arises - to either replace existing\nsystems or to handle new or changed responsibilities - a project is created for that purpose. The projects are often\nsupported with external consultants, and when complete they are transferred to the Line. The Line will\nmaintain and support the software over time, usually decades, and will initially be staffed with personnel from both the\nproject and from the Line itself.</p>\n<p>Even before we started exploring OpenShift we knew that we would have to automate integration with our existing\ninfrastructure regardless of the platform we would end up using - so doing some sort of common initiative to provide\nautomation and integration services was given from the get-go. As we familiarized ourselves with OpenShift we saw\nthat there were several other areas that would also benefit from a central, common effort.</p>\n<p>It was important to us that supporting applications on the platform developed by different teams, often with personnel\nunfamiliar with developing software for the NTA, should be pretty much the same regardless of who developed it. For\ninstance, rolling out a Java Virtual Machine patch should be exactly the same for all applications, and it should be\npossible for us to roll out such a patch for all applications across all environments in one go. Similarly, the\nprocess of upgrading an application developed by one team deployed to a specific environment should be exactly the\nsame for any other application developed by a completely different team. Additionally, we wanted configuration to be\nhandled the same for all applications across all environments.</p>\n<p>One of the things that struck us after getting some experience with OpenShift was how flexible it was to work with.\nAlthough the platform certainly comes with its fair share of requirements and idiosyncrasies, we found that there was\nhardly anything we were not able to do. However, we also very quickly realized that with all this flexibility comes a\nquite steep learning curve on how "to do things right", and allowing individual teams to freely develop their\nown strategies on how to use OpenShift would bear with it a high cost of entry, slower internal adoption and\ndifficulties streamlining maintenance and deployment activities across teams. Also, there were few obvious upsides to\nletting teams freely use OpenShift their own way. For instance, we were hard press to find good answers to questions\nlike;</p>\n<ul>\n<li>What would be the benefit for teams to develop and maintain their own base image for their Java applications instead\nof collaborating on one?</li>\n<li>What would be the benefit for teams to device their own Docker Image build processes instead of adopting a common one?</li>\n<li>What would be the benefit for teams to develop and maintain their own scripts and tools for handing deployment and\nconfiguration across different environments?</li>\n</ul>\n<p>Going back and forth, we almost always ended up at "not a whole lot". It became pretty clear that a common effort to\ncoordinate how the teams should use the platform and maintain reusable components and services was a good idea.</p>\n<h1 id="what-is-the-aurora-openshift-platform"><a href="#what-is-the-aurora-openshift-platform" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What is the Aurora OpenShift Platform?</h1>\n<p>The Aurora OpenShift Platform is everything the Norwegian Tax Administration has developed to support\napplication configuration, deployment and management on OpenShift, common application base images, and a common build\nand versioning mechanism for application archives and Docker images. A collect set of infrastructure integration and\nautomation components are also considered part of the platform.</p>\n<p>The main user facing components implementing these mechanisms are:</p>\n<ul>\n<li>Aurora Console: The most prominent feature of the Aurora OpenShift platform is the Aurora Console. The Aurora Console is a custom\nbuilt web application that we use in conjunction with the platform provided OpenShift Console to better handle\napplications across teams and environments.</li>\n<li><a href="https://github.com/Skatteetaten/ao">AO</a>: The Aurora OpenShift Command Line Client. Our custom built CLI that works with a set of high level configuration\nfiles that helps managing applications and configuration across environments.</li>\n<li>AuroraConfig: A DSL config format for describing applications and groupings of applications (environments)</li>\n<li>The Aurora API: The API that implements all our custom services. Used by the Aurora Console and AO. <a href="https://github.com/Skatteetaten/boober">boober</a>, <a href="https://github.com/Skatteetaten/mokey">mokey</a>, <a href="https://github.com/Skatteetaten/dbh">dbh</a></li>\n<li><a href="https://github.com/Skatteetaten/architect">Architect</a>: A Docker image that implements the image build process for all our supported runtime technologies</li>\n<li>Base Images: A set of Alpine Linux based Docker Images that all our applications are built from. <a href="https://github.com/Skatteetaten/wingnut">wingnut</a> and <a href="https://github.com/Skatteetaten/wrench">wrench</a></li>\n</ul>\n<p>The coming sections will describe these components in more detail.</p>\n<h1 id="how-we-develop-and-build-our-applications"><a href="#how-we-develop-and-build-our-applications" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How we Develop and Build our Applications</h1>\n<h2 id="coding-and-application-build-requirements-delivery-bundle"><a href="#coding-and-application-build-requirements-delivery-bundle" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Coding and Application Build Requirements: Delivery Bundle</h2>\n<p>Coding an application targeted at the Aurora OpenShift Platform follows closely the principles of the\n<a href="https://12factor.net/">Twelve-Factor App</a> from Heroku. Additionally the following requirements must be met;</p>\n<ul>\n<li>The application must run on the JVM and, currently, must be written exclusively in Java. Node is supported when\ndeveloping <a href="http://samnewman.io/patterns/architectural/bff/">Backends for Frontends</a>, but then only with very limited\nfunctionality.</li>\n<li>The application must currently be built using Apache Maven.</li>\n<li>\n<p>The delivery mechanism is an assembly bundle zip file uploaded to our internal Nexus registry. We call this zip file\na Leveransepakke (Delivery Bundle)</p>\n<ul>\n<li>The Delivery Bundle must contain a lib folder with all the jars for the application.</li>\n<li>The Delivery Bundle must contain a metadata/openshift.json file to provide build time metadata to the application\nimage building process (Architect). This includes among other things information used to generate a start script for\nthe application and metadata used to label the Docker image.</li>\n</ul>\n</li>\n<li>We support both versioned releases and snapshots, but versioned releases must follow the\n<a href="http://semver.org/">Semantic Versioning</a> system.</li>\n<li>The application must implement our proprietary management interface. This interface is described in more detail\nlater.</li>\n</ul>\n<p>Additionally we prefer that the applications are built via Jenkins and that the source repository of the application\ncontains a Jenkinsfile that describes the build process. Ideally, the Jenkinsfile uses our common Jenkins pipeline\nscripts (making the Jenkinsfile less than 10 lines of code).</p>\n<p>We provide a <a href="https://www.thoughtworks.com/radar/techniques/tailored-service-template">Tailored Service Template</a> <a href="https://github.com/Skatteetaten/openshift-reference-springboot-server">openshift-reference-springboot-server</a> for a\nstandard application that fulfill all these demands that teams building new applications can use to get started.</p>\n<h2 id="the-image-build-process"><a href="#the-image-build-process" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Image Build Process</h2>\n<p>Once the Delivery Bundle has been uploaded to Nexus we trigger (or create) an OpenShift BuildConfig for that specific\nartifact (identified by the groupId and artifactId that was used when uploading to Nexus). We also provide the version\nof the artifact that was just built as a parameter to the build.</p>\n<p>The BuildConfig is configured to use the\nOpenShift Container Platform’s <a href="https://docs.openshift.com/container-platform/latest/dev_guide/builds/build_strategies.html#custom-strategy-options">Custom build strategy</a>\nand we have created our own Docker image, dubbed Architect, to build an application Docker image from the Delivery\nBundle based on our Java base image, dubbed Wingnut.</p>\n<p>In addition to building the application image, Architect is also responsible for tagging the produced image with\nseveral application and platform specific version tags that is the underpinning of our flexible deployment strategy.</p>\n<p>Architect, Wingnut, our versioning strategy and our deployment strategy are described in more detail below.</p>\n<p>In addition to passing parameters to Architect, the BuildConfig is also configured with two\n<a href="https://docs.openshift.com/container-platform/latest/dev_guide/builds/index.html#image-change-triggers">ImageChange triggers</a>.\nOne for Architect and one for Wingnut. This allows us to use OpenShift to automatically trigger a build of the most\nrecent version of any application when we release a new version of either Architect or Wingnut.</p>\n<h2 id="the-application-image-builder-architect"><a href="#the-application-image-builder-architect" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Application Image Builder: Architect</h2>\n<p>Architect is a Docker image built upon Alpine Linux that is responsible for building all our application images. It is\ndesigned to work as an OpenShift\n<a href="https://docs.openshift.com/container-platform/3.4/creating_images/custom.html">CustomBuilder</a> and is mostly triggered\nfrom BuildConfigs. It will download a prebuilt Delivery Bundle artifact from Nexus based on the groupId, artifactId and\nversion (GAV) provided as parameters and inspect the metadata/openshift.json-file in the bundle to determine the\ntechnology used by the application. Based on the technology used, a suitable base image will be selected and the build\nprocess determined. The build processes for the different technologies are implemented as generated Dockerfiles and will\nvary depending on the runtime technology used.</p>\n<h3 id="building-java-applications"><a href="#building-java-applications" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Building Java Applications</h3>\n<p>In addition to adding the Java application from the Delivery Bundle, a Java build will also add a custom certificate\nstore and our common logback.xml configuration file to the generated image. Applications are encouraged to use this\nlogback-file instead of providing their own to make sure that they are in compliance with the logging requirements.</p>\n<p>For our Java applications, Architect supports generating a start script based on a few parameters set in the\nmetadata/openshift.json-file. Though not a requirement at this time (applications may provide their own start script),\nproviding a mechanism for automatically generating a start script has a few major benefits;</p>\n<ul>\n<li>Getting a start script for Java right on OpenShift is actually quite hard. The script must make sure that the main\nprocess is properly backgrounded, while still handling signals like SIGTERM. It must also trap the Java process to\nrewrite application exit codes; for instance, Java exits with 143, while OpenShift expects properly terminated\napplications to return 0. Additionally -Xmx must be set in relation to the available cgroup memory. Our generated start\nscript handles all these issues.</li>\n<li>We require that the Jolokia agent is enabled for all Java processes to enable the hawt.io integration in OpenShift.\nOur generated start script enables this by default.</li>\n</ul>\n<p>Additionally, the generated start script will create a deterministic class path from the lib folder, set JVM<em>OPTS and\nAPPLICATION</em>ARGS from the openshift.json file and optionally enable remote debugging.</p>\n<p>The start script we use is heavily inspired by several other similar solutions, chief among them\n<a href="https://github.com/fabric8io-images/run-java-sh">run-java-sh</a>.</p>\n<h3 id="common-steps"><a href="#common-steps" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Common Steps</h3>\n<p>In addition to generating application and technology specific start scripts we also provide a required wrapper script\nthat acts as the actual entry point of the application Docker image. This script will, among a few other\nthings, read configuration files that have been mounted into the container and make them available as environment\nvariables for the application. This process is described in more detail later.</p>\n<p>After the application Docker image has been built it is pushed to our internal Docker registry. We also tag the image\nwith several version tags to support our deployment strategy. Our versioning strategy is described below.</p>\n<h2 id="image-versioning-strategy-the-auroraversion"><a href="#image-versioning-strategy-the-auroraversion" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Image Versioning Strategy: The AuroraVersion</h2>\n<p>The structure of the final application Docker image is affected not only by the application Delivery Bundle, but also\non the specific version of Architect that was used to build the image, and the version of the base image that was used.\nThis means that even if the application version does not change, we may still produce entirely different images by\nchanging the version of Architect or the base image. To reflect these dependencies, when tagging the image with the\nfinal version, the version tag used contains not only the application version, but also the versions of Architect and\nthe base image, along with the base image name. We call this composite version tag the AuroraVersion and an example\ncan be seen in the diagram below;</p>\n<p><img src="images/auroraVersion.png" alt="AuroraVersion"></p>\n<p>When the application has a semver compliant version we additionally push individual tags for the major version,\nfor the major and minor version combined, for the major, minor and patch version combined, and finally the\nlatest tag. An example is provided in the following diagram;</p>\n<p><img src="images/versioning.png" alt="Versioning"></p>\n<p>A snapshot version is a version string that ends with the literal "-SNAPSHOT", like "1.0.0-SNAPSHOT" or\n"some<em>new</em>feature-SNAPSHOT". When building a snapshot release, in addition to the AuroraVersion, we also push two\nsnapshot tags. Using "some<em>new</em>feature-SNAPSHOT" as an example we push</p>\n<ul>\n<li>SNAPSHOT-some<em>new</em>feature-{buildNumber}, where the buildNumber is fetched from Nexus</li>\n<li>some<em>new</em>feature-SNAPSHOT</li>\n</ul>\n<p>By applying this versioning strategy to our Docker images we in turn get tremendous flexibility when it comes to\ndeploying and patching our applications on OpenShift. Our deployment and patching strategy is described next.</p>\n<h2 id="deployment-and-patching-strategy"><a href="#deployment-and-patching-strategy" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Deployment and Patching Strategy</h2>\n<p>When deploying new applications to OpenShift we always use our proprietary AO command line tool. This tool ensures that all\ndeployed applications follow the same basic pattern. AO is described in depth later so we will not go\ninto all the details here, but for the purposes of describing our deployment and patching strategy we need to highlight\na couple of the objects that AO generates.</p>\n<p>Based on the configuration files given to AO, we generate the OpenShift objects that are required to run the\napplication. We generate one\n<a href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/builds_and_image_streams.html#image-streams">ImageStream</a>\nfor each application we deploy. This ImageStream contains one (and only one) scheduled tag. We then generate a\n<a href="https://docs.openshift.com/container-platform/latest/architecture/core_concepts/deployments.html#deployments-and-deployment-configurations">DeploymentConfig</a>\nwith a single container that uses the previously generated ImageStream and scheduled tag as its image reference. We\nalso register a ImageChangeTrigger to trigger redeploys when the tag in the ImageStream changes.</p>\n<p>To deploy the application we simply change the Docker tag that the scheduled tag in the ImageStream points to to the\napplication version we want to run. The application version can be any of the tags we have previously tagged the image\nwith (see "Image Versioning Strategy: The AuroraVersion"), and since the tag in the image stream is scheduled, it will\npick up any changes to the tag that may occur as a result of building new application images. For instance, we can set\nthe scheduled tag in the ImageStream to any of the following tags to determine the deployment strategy for a particular\napplication:</p>\n<p>In the following list, the term infrastructure refers to the versions of the base image and Architect in the\nAuroraVersion string.</p>\n<ul>\n<li>use <strong>latest</strong> to automatically deploy the latest image with a semver compliant version</li>\n<li>use <em>1</em> to automatically deploy the newest image for a major version (any 1.x.y version) of an application. Following\nthe semver semantics, this includes all new features and bugfixes but no breaking changes. Infrastructure changes are\nalso included.</li>\n<li>use <em>1.1</em> to automatically deploy the newest image for a minor version (any 1.1.x version) of an application.\nFollowing the semver semantics, this includes all bugfixes. Infrastructure changes are also included.</li>\n<li>use <em>1.1.1</em> to automatically deploy the newest image for a patch version (any 1.1.1 version) of an application.\nFollowing the semver semantics, this actually excludes any other application version from being deployed, and hence,\nthe application will only be deployed if the infrastructure changes.</li>\n<li>use the full <strong>AuroraVersion</strong> of a release to pin the deployment to that specific combination of application version\nand infrastructure. OpenShift will never automatically redeploy this application since the AuroraVersion tag will never\nchange for an image.</li>\n<li>use <strong>SNAPSHOT-versionname</strong> to get the latest build from a snapshot</li>\n</ul>\n<p>Like we mentioned in the section "The Image Build Process" the OpenShift BuildConfig is configured with two\nImageChange triggers. One for Architect and one for the base image. This allows us to automatically retrigger the build\nof an application image when new versions of either Architect or the base image are released. Commonly, when releasing\nfor instance a new version of Wingnut, our base image for Java, with a new Java Runtime Environment version, hundreds of\napplication images are automatically rebuilt - and in many cases, based on the deployment strategy for the individual\napplications, automatically redeployed by the platform.</p>\n<h2 id="application-configuration-strategy"><a href="#application-configuration-strategy" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Application Configuration Strategy</h2>\n<p>Arriving at a strategy for configuring our applications for particular environments (development, test, etc) was a\nlong and winding road, taking us back to the drawing board several times. We explored many of the off the shelf\nsolutions for handling this, but in the end we did not want a runtime dependency for all our applications on a\nconfiguration service. In addition we struggled to find a product that actually suited our needs and fit into our\nnetwork infrastructure.</p>\n<p>We wanted a solution that would let us maintain several sets of configurations for an application, each set tailored\nto the environment the application would run in, and we also needed to support several versions of the configuration\nschema at the same time. For instance, version 1.0.0 of an application will often be configured differently than version\n2.0.0 of that same application.</p>\n<p>What we ended up doing was to let AO, from the AO config (described later), create a ConfigMap with a file that\ncontains the configuration for the application in the environment it is being deployed to. This configuration file is\nmounted in the application Docker container by the DeploymentConfig, read by the entrypoint wrapper script\n(described in "The Application Image Builder: Architect") and exposed as environment variables for the application.</p>\n<p>Using only environment variables for configuration allows us to configure applications using completely different\nruntime technologies the same way. In addition, many of our existing applications running outside OpenShift were already\nconfigured using environment variables, and thus would require little modification to their configuration handling to\nadapt to running on OpenShift. And, finally, we have no application runtime dependencies to third party services for\nconfiguration that may or may not be available at application startup, significantly reducing risk.</p>\n<h2 id="development-flow"><a href="#development-flow" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Development flow</h2>\n<p>In order to support rapid development on the platform a variant of the image build process has been created. The Architect\nbuilder has received support for binary builds. This means that you can build a Delivery Bundle locally and then send it directly to the builder.</p>\n<p>A demo of this can be seen in the following asciicinema. <a href="https://asciinema.org/a/AU2ZyCk8X0CnJ51MarmhqIp9w">demo of development flow</a></p>\n<h1 id="ao"><a href="#ao" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AO</h1>\n<p>History. Move this to main document\nWe started out using <a href="https://docs.openshift.org/latest/dev_guide/templates.html">OpenShift Templates</a> in 2015. A go-template based template engine that takes a list of parameters and replaces it into objects before applying them to the cluster. For our needs this technology was and is severly lacking. - no support for conditional logic - no support for loops - no support for optionaly including and entire object We then created a bash wrapper around the templates that would generate objects for it and modify them afterwards. The config for this bash wrapper resided along side the application code. After som experience with this we found several issues with it - writing good bash is hard and testing tools are lacking - no client-server model, so we had to duplicate functionality in web dashboard - you had to commit and change code in repo to change config. That means triggereing new jenkins builds when not really needed. This lead to the design of the start of the AuroraAPI with the <a href="aurorapi/boober">boober</a>, <a href="auroraConfig">AuroraConfig</a> and <a href="tools/ao">ao</a> components.</p>\n<p><a href="https://github.com/Skatteetaten/ao">AO</a> (Aurora OpenShift CLI) is our custom command line client for deploying applications to OpenShift.</p>\n<p>The need for a custom command line client became apparent when we saw that the teams started developing their own\nscripts for deploying applications across different environments. These scripts quickly became quite complex,\nand while basically solving the same problems, they were implemented differently. We also wanted to avoid the teams\nhaving to maintain a huge set of OpenShift yaml or json files for their applications and because of the very limited\nfunctionality in the OpenShift template mechanism, the templates we created to mitigate that were not powerful enough\non their own to be used entirely without some manipulation through scripting.</p>\n<p>The first versions of AO interacted with OpenShift and supporting infrastructure directly, and though useful, it was\nhard to extend, reuse functionality and roll out fixes. Recent versions of AO is a simple frontend for the Aurora\nAPI, our core automation API on the Aurora OpenShift Platform. Over time, AO has matured into a tool not only for\ncoordinating deployments to OpenShift, but also for triggering other infrastructure automation tasks.</p>\n<p>Finally, a custom command line client would allow us to more easily make sure that the applications were deployed and\nconfigured the same, allowing us to make assumptions about applications when creating the Aurora Console.</p>\n<p>AO is driven by a set of configuration files (AuroraConfig) that describe how applications should be deployed and configured in\ndifferent environments. The configuration files are organized in a hierarchy and are cascading, allowing us to share and\noverwrite configuration options across applications and environments. AO sends these configuration files to the\nAurora API which in turn creates or updates the appropriate OpenShift objects (like DeploymentConfig, Service, Route)\nand performs other infrastructure automation tasks.</p>\n<p>The following features can be configured in the AuroraConfig configuration</p>\n<ul>\n<li>The application to deploy</li>\n<li>Deployment strategy; the version to deploy</li>\n<li>What database schemas to generate/reuse</li>\n<li>Should a security token for secure communication be generated?</li>\n<li>Config variables</li>\n<li>Should a Route be generated for this application</li>\n<li>Enable rolling upgrades</li>\n<li>Configure Splunk index</li>\n<li>Create other routes/automate opening traffic in network infrastructure (webseal/BiG-IP)</li>\n</ul>\n<p>The setup process of AO is idempotent so calling it several times will only update the required parts in the old\nobjects. After running AO on one single application the objects created on OpenShift is illustrated by the following\ndiagram.</p>\n<p><img src="images/deploy.png" alt="Deploy"></p>\n<h1 id="aurora-console"><a href="#aurora-console" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Aurora Console</h1>\n<p>The Aurora Console is our custom made companion web application to the of-the-shelf OpenShift Console. It does not\nreplace the OpenShift Console, nor does it try to, but it adds quite a bit of functionality that the OpenShift\nConsole does not have (and probably should not have). Some of it is related to viewing and manging infrastructure\nitems like firewall openings, proxy configurations, certificates and database schemas, and does not have anything to\ndo with OpenShift per se. Others take full advantage of the way we deploy our applications and provide powerful\nscreens for displaying, configuring, upgrading and monitoring applications for different teams across environments.</p>\n<h1 id="the-aurora-api"><a href="#the-aurora-api" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Aurora API</h1>\n<p>The Aurora API is our platform automation API and provides endpoints used by both AO and the Aurora Console. The main\nfeatures of the API includes;</p>\n<ul>\n<li>Execution of the instructions given by the AuroraConfig configuration files.</li>\n<li>Provides abstractions that builds on the OpenShift objects and other infrastructure objects, mainly\nAuroraApplication, AuroraDeploymentConfiguration, AuroraVersion and AuroraStatus.</li>\n<li>Endpoints for managing infrastructure components and applications, like performing upgrades and configuration\nchanges.</li>\n<li>Produce status metrics for an application on the platform. Fetches information from Docker registry, the cluster and the applications management interface.</li>\n<li>Miscellaneous tools to aid in development and debgging infrastructure issues.</li>\n</ul>\n<h1 id="application-monitoring"><a href="#application-monitoring" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Application Monitoring</h1>\n<p>Although OpenShift provides many mechanisms for keeping applications running even when failures occur, of course, in the\nreal world applications sometimes, unavoidably, still go down. If it is your responsibility to monitor applications on\nOpenShift, the native user interface is not actually great for that. It can be hard to get an overview of the status\nof all applications in an OpenShift project/namespace, and it is nearly impossible to get such an overview across\nnamespaces. The support for providing application status to OpenShift is also quite limited; its either working\nproperly, or it is not, and getting feedback for application troubleshooting is nearly completely absent.</p>\n<p>We required quite a bit more of the platform to confidently monitor our applications, and one of the most prominent\nfeatures of the Aurora Console, the Application Monitoring Wallboard, addresses this. It presents a matrix of\napplications and environments with all their associated statuses. The information in the wallboard is in part provided\nby OpenShift and in part by the applications themselves, everything made available to the Wallboard via the Aurora API.\nIn order for the Aurora API to provide all this information, the applications running on the Aurora OpenShift platform\nis required to implement our proprietary Management Interface (which is in part based on Spring Boot Actuator).</p>\n<p>Information from the Management Interface of the applications in combination with information we collect about the\napplications from OpenShift via the OpenShift API collectively contributes to an aggregated application status that we\ncall the AuroraStatus.</p>',
tableOfContents:'<ul>\n<li><a href="/blog/openshift/#introduction">Introduction</a></li>\n<li><a href="/blog/openshift/#a-short-history">A Short History</a></li>\n<li><a href="/blog/openshift/#requirements-for-the-aurora-openshift-platform">Requirements for the Aurora OpenShift Platform</a></li>\n<li><a href="/blog/openshift/#what-is-the-aurora-openshift-platform">What is the Aurora OpenShift Platform?</a></li>\n<li>\n<p><a href="/blog/openshift/#how-we-develop-and-build-our-applications">How we Develop and Build our Applications</a></p>\n<ul>\n<li><a href="/blog/openshift/#coding-and-application-build-requirements-delivery-bundle">Coding and Application Build Requirements: Delivery Bundle</a></li>\n<li><a href="/blog/openshift/#the-image-build-process">The Image Build Process</a></li>\n<li>\n<p><a href="/blog/openshift/#the-application-image-builder-architect">The Application Image Builder: Architect</a></p>\n<ul>\n<li><a href="/blog/openshift/#building-java-applications">Building Java Applications</a></li>\n<li><a href="/blog/openshift/#common-steps">Common Steps</a></li>\n</ul>\n</li>\n<li><a href="/blog/openshift/#image-versioning-strategy-the-auroraversion">Image Versioning Strategy: The AuroraVersion</a></li>\n<li><a href="/blog/openshift/#deployment-and-patching-strategy">Deployment and Patching Strategy</a></li>\n<li><a href="/blog/openshift/#application-configuration-strategy">Application Configuration Strategy</a></li>\n<li><a href="/blog/openshift/#development-flow">Development flow</a></li>\n</ul>\n</li>\n<li><a href="/blog/openshift/#ao">AO</a></li>\n<li><a href="/blog/openshift/#aurora-console">Aurora Console</a></li>\n<li><a href="/blog/openshift/#the-aurora-api">The Aurora API</a></li>\n<li><a href="/blog/openshift/#application-monitoring">Application Monitoring</a></li>\n</ul>',fields:{slug:"/blog/openshift/"},frontmatter:{date:"April 10, 2018",path:null,title:"The Aurora OpenShift Platform"}}},pathContext:{slug:"/blog/openshift/"}}}});
//# sourceMappingURL=path---blog-openshift-a442549fb5b27b0108b0.js.map